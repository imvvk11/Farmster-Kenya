"""
Django settings for farmster_server project.

Generated by 'django-admin startproject' using Django 2.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/2.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.1/ref/settings/
"""

import datetime
import os
import google.cloud.logging
from django.utils.translation import gettext_lazy as _

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'mf!ip#(li2lifxd_ot*v49z!)!^v9!+o#*x^moy2j57taw0f6f'

ALLOWED_HOSTS = []

# Application definition

INSTALLED_APPS = [
    'modeltranslation',
    'grappelli',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'rest_framework.authtoken',
    'rest_auth',
    'allauth',
    'corsheaders',
    'app_auth',
    'nested_admin',
    'farmster_server'
]
AUTH_USER_MODEL = 'farmster_server.User'
SITE_ID = 1

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware'
]

REST_AUTH_SERIALIZERS = {
    'LOGIN_SERIALIZER': 'farmster_server.serializers.user.LoginCustomSerializer', }

ROOT_URLCONF = 'farmster_server.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'farmster_server.wsgi.application'

# REST FRAMEWORK
REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': (
        'farmster_server.utils.api_request_permissions.HasApiKeyOrAuthenticated',
    ),

    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.TokenAuthentication',
    ],
    'DEFAULT_PARSER_CLASSES': (
        'rest_framework.parsers.JSONParser',
    ),
    'DEFAULT_RENDERER_CLASSES': (
        'farmster_server.utils.json_response_renderer.JsonResponseRenderer',
    ),
    'EXCEPTION_HANDLER': 'farmster_server.utils.exception_handler'
}

JWT_AUTH = {
    'JWT_VERIFY_EXPIRATION': False,
    'JWT_EXPIRATION_DELTA': datetime.timedelta(days=7),
    'JWT_REFRESH_EXPIRATION_DELTA': datetime.timedelta(days=30),
    'JWT_ALLOW_REFRESH': True
}

# LOGGING
LOG_FOLDER = os.path.abspath(os.path.join(os.path.dirname(__file__), os.pardir, os.pardir, 'logs'))
LOGFILE_NAME = os.path.join(LOG_FOLDER, 'farmster.log')
LOGFILE_SIZE = 1 * 1024 * 1024
LOGFILE_COUNT = 5

if not os.path.exists(LOG_FOLDER):
    os.makedirs(LOG_FOLDER)

# Test if running in google cloud
if os.getenv('GAE_APPLICATION', None):
    client = google.cloud.logging.Client()
    client.setup_logging()
    LOGGING = {
        'version': 1,
        'disable_existing_loggers': False,
        'formatters': {
            'standard': {
                'format': "[%(asctime)s] %(levelname)s [%(name)s:%(lineno)s] %(message)s",
                'datefmt': "%d/%b/%Y %H:%M:%S"
            },
        },
        'handlers': {
            'stackdriver': {
                'class': 'google.cloud.logging.handlers.CloudLoggingHandler',
                'client': client,
                'formatter': 'standard'
            },
            'null': {
                'level': 'DEBUG',
                'class': 'logging.NullHandler',
            },
        },
        'loggers': {
            'django.request': {
                'handlers': ['stackdriver'],
                'level': 'ERROR',
                'name': os.getenv('ENVIRONMENT_NAME'),
                'propagate': True,
            },
            'django.db.backends': {
                'handlers': ['null'],  # Quiet by default!
                'propagate': False,
                'level': 'DEBUG',
            },
            'farmster_server': {
                'handlers': ['stackdriver'],
                'level': 'DEBUG',
                'name': os.getenv('ENVIRONMENT_NAME'),
            }
        }
    }

else:
    LOGGING = {
        'version': 1,
        'disable_existing_loggers': False,
        'formatters': {
            'standard': {
                'format': "[%(asctime)s] %(levelname)s [%(name)s:%(lineno)s] %(message)s",
                'datefmt': "%d/%b/%Y %H:%M:%S"
            },
        },
        'filters': {
            'require_debug_false': {
                '()': 'django.utils.log.RequireDebugFalse'
            }
        },
        'handlers': {
            'logfile': {
                'level': 'INFO',
                'class': 'logging.handlers.RotatingFileHandler',
                'filename': LOGFILE_NAME,
                'maxBytes': LOGFILE_SIZE,
                'backupCount': LOGFILE_COUNT,
                'formatter': 'standard',
            },
            'console': {
                'level': 'DEBUG',
                'class': 'logging.StreamHandler'
            },
            'null': {
                'level': 'DEBUG',
                'class': 'logging.NullHandler',
            },

        },
        'loggers': {
            'django.request': {
                'handlers': ['console', 'logfile'],
                'level': 'ERROR',
                'propagate': True,
            },
            'django.db.backends': {
                'handlers': ['null'],  # Quiet by default!
                'propagate': False,
                'level': 'DEBUG',
            },
            'farmster_server': {
                'handlers': ['console', 'logfile'],
                'level': 'DEBUG'
            }
        }
    }

# DATABASE
# https://docs.djangoproject.com/en/2.1/ref/settings/#databases
# To see the database config see in dev/staging/prd env settings


# Password validation
# https://docs.djangoproject.com/en/2.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    # {
    #     'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    # },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# INTERNATIONALIZATION
# https://docs.djangoproject.com/en/2.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

LANGUAGES = [
    ('en', _('English')),
    ('sw', _('Swahili'))
]

TIME_ZONE = 'Asia/Jerusalem'  # 'UTC'
USE_I18N = True
USE_L10N = True
USE_TZ = True

# STATIC FILES (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.1/howto/static-files/

if os.getenv('GAE_APPLICATION', None):
    STATIC_ROOT = 'static'
else:
    STATIC_ROOT = os.path.join(BASE_DIR, 'static')

STATIC_URL = '/static/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
MEDIA_URL = '/media/'

APPEND_SLASH = False
# AUTHENTICATION_BACKENDS = (
#     "django.contrib.auth.backends.ModelBackend",
# )

TOKEN_EXPIRATION_TIME_MINUTES = 10
GRAPPELLI_ADMIN_TITLE = 'Farmster'
